import cv2
import numpy as np
import os
def face(image_path):
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    eye_cascade=cv2.CascadeClassifier('haarcascade_eye.xml')
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    eye=eye_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(20,20))
    cap = cv2.imread(image_path)
    for (x, y, w, h) in faces:
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        # Crop the face region from the frame
        face = gray[y:y+h, x:x+w]
        face = cv2.imread(image_path)
        if face.ndim == 2:
            face = cv2.cvtColor(face, cv2.COLOR_GRAY2BGR)
        face_gray = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)

        # Normalize the grayscale face region
        face_gray = face_gray / 255.0

        # Expand dimensions of the grayscale face region to match the input shape of the model
        face_gray = np.expand_dims(face_gray, axis=0)
        face_gray = np.expand_dims(face_gray, axis=-1)
        cv2.rectangle(face, (x, y), (x+w, y+h), (0, 0, 255), 2)
        cv2.putText(face, 'Person', (x, y+h+20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
        cv2.imshow('Face detect', face)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
def show_image(image_path):

    image = cv2.imread(image_path)

    cv2.imshow('Image', image)
def show1(image_path):
    image=cv2.imread(image_path)
    lar=cv2.Laplacian(image, cv2.CV_8U)
    pencil_setch = cv2.bitwise_not(lar)
    cv2.imshow('Pencil Setch',pencil_setch)
def show2(image_path):
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) # Define the variable 'gray'
    cv2.imshow('Gray', gray)
def show3(image_path):
    image=cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    cv2.imshow('Blur',blur)
def show4(image_path):
    image=cv2.imread(image_path)
    lar=cv2.Laplacian(image, cv2.CV_8U)
    cv2.imshow('Laplacian.orignal',lar)
def show5(image_path):
    image=cv2.imread(image_path)
    rotation_matrix = cv2.getRotationMatrix2D((image.shape[1]/2, image.shape[0]/2), 45, 1)
    rotated_image = cv2.warpAffine(image, rotation_matrix, (image.shape[1], image.shape[0]))
    cv2.imshow('Rotate',rotated_image)
def show6(image_path):
    image=cv2.imread(image_path)
    start_point = (100, 100)
    end_point = (400, 400)
    cr = image[start_point[1]:end_point[1], start_point[0]:end_point[0]]
    cv2.imshow('Crop',cr)
    
    
def main():

    while True:

        image_path = input("Enter the path of the image: ")
        print('1,Show image','a,Gray image', 'b,PencilSketch', 'c,Blur', 'd,Laplacian', 'e,Rotate', 'f,Crop','g,Facial  recognization','f,nothing',sep='\n')
        choice2=input('Option: ')
        if os.path.exists(image_path):
            if choice2=='1':
                show_image(image_path)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
            if choice2=='a':
                show2(image_path)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
            if choice2=='b':
                show1(image_path)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
            if choice2=='c':
                show3(image_path)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
            if choice2=='d':
                show4(image_path)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
            if choice2=='e':
                show5(image_path)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
            if choice2=='f':
                show6(image_path)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
            if choice2=='g':
                face(image_path)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
            if choice2 == 'h':
                continue

        else:
            print("Image not found. Please enter a valid path.")


if __name__ == "__main__":

    main()
