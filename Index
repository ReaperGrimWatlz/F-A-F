import cv2
import numpy as np
from keras.models import load_model
from keras.preprocessing.image import img_to_array
from keras.utils import get_file
from time import sleep

# Load face detection model
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Load face recognition model
model_path = 'https://github.com/opencv/opencv/blob/master/samples/data/dnn/face_detector/res10_300x300_ssd_iter_140000_fp16.caffemodel?raw=true'
model_path = get_file('res10_300x300_ssd_iter_140000_fp16.caffemodel', model_path)
net = cv2.dnn.readNetFromCaffe(model_path)

# Load face recognition model
model = load_model('face_recognition_model.h5')

# Initialize video capture
cap = cv2.VideoCapture(0)

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(frame, 1.3, 5)

    # Draw rectangle around the faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

        # Crop the face region from the frame
        face = frame[y:y+h, x:x+w]

        # Resize the face region to 300x300 pixels
        face = cv2.resize(face, (300, 300))

        # Convert the face region to grayscale
        face_gray = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)

        # Normalize the grayscale face region
        face_gray = face_gray / 255.0

        # Expand dimensions of the grayscale face region to match the input shape of the model
        face_gray = np.expand_dims(face_gray, axis=0)
        face_gray = np.expand_dims(face_gray, axis=-1)

        # Make a prediction
        prediction = model.predict(face_gray)

        # Display the predicted name
        cv2.putText(frame, 'Prediction: ' + str(np.argmax(prediction)), (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Display the resulting frame
    cv2.imshow('Video', frame)

    # Exit the loop when 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object
cap.release()

# Close all windows
cv2.destroyAllWindows()
