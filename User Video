import cv2
import numpy as np
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
true=True
vid=cv2.VideoCapture(0)
def main():

    while True:
        print('a=Show Video','b=Gray','c=Pencil Sketch','d=Blur','e=Laplacian', 'f=Color filter','g=cancel',sep='\n')
        choice=input('Option: ')
        match choice:
            case 'a':
                print('1,Show Video' , '2,Rotated' , '3,Crop'   , '4,Rotated and crop ', '5,Face Detect', sep='\n')
                choice2=input('Option: ')
                match choice2:
                    case '1':
                        while True:
                            ret, img=vid.read()
                            cv2.imshow('Img',img)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'2':
                        while true:
                            ret, img = vid.read()
                            rotation_matrix = cv2.getRotationMatrix2D((img.shape[1]/2, img.shape[0]/2), 45, 1)
                            rotated_image = cv2.warpAffine(img, rotation_matrix, (img.shape[1], img.shape[0]))
                            cv2.imshow('Rotate',rotated_image)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'3':
                        while true:
                            ret, img = vid.read()
                            start_point = (100, 100)
                            end_point = (400, 400)
                            cr = img[start_point[1]:end_point[1], start_point[0]:end_point[0]]
                            cv2.imshow('Crop',cr)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'4':
                        while true:
                            ret, img = vid.read()
                            rotation_matrix = cv2.getRotationMatrix2D((img.shape[1]/2, img.shape[0]/2), 45, 1)
                            rotated_image = cv2.warpAffine(img, rotation_matrix, (img.shape[1], img.shape[0]))
                            start_point = (100, 100)
                            end_point = (400, 400)
                            cr = rotated_image[start_point[1]:end_point[1], start_point[0]:end_point[0]]
                            cv2.imshow('Croped&Rotated',cr)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'5':
                        while True:
                            ret, img = vid.read()
                            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                            faces = face_cascade.detectMultiScale(gray, 1.3, 5)
                            for (x, y, w, h) in faces:
                                cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)
                            cv2.imshow('Face detect', img)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
            case'b':
                   print('1,Gray Filter',    '2,Gray Crop',     '3,Gray Rotated',     '4,Gray crop and rotated', '5, Face Detect', sep='\n')
                   choice2=input('Option: ')
                   match choice2:
                       
                        case'1':
                            while true:
                                ret, img=vid.read()
                                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Define the variable 'gray'
                                cv2.imshow('Gray',gray)
                                if cv2.waitKey(1) & 0xFF == ord('q'):
                                    break
                            vid.release()
                            cv2.destroyAllWindows()
                        case'2':
                            while true:
                                ret, img=vid.read()
                                gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                                start_point = (100, 100)
                                end_point = (400, 400)
                                cr = gray[start_point[1]:end_point[1], start_point[0]:end_point[0]]
                                cv2.imshow('Croped(gray)',cr)
                                if cv2.waitKey(1) & 0xFF == ord('q'):
                                    break
                            vid.release()
                            cv2.destroyAllWindows()
                        case'3':
                            while true:
                                ret, img = vid.read()
                                gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                                rotation_matrix = cv2.getRotationMatrix2D((img.shape[1]/2, img.shape[0]/2), 45, 1)
                                rotated_image = cv2.warpAffine(gray), rotation_matrix, (img.shape[1], img.shape[0])
                                cv2.imshow('Rotated(gray)',rotated_image)
                                if cv2.waitKey(1) & 0xFF == ord('q'):
                                    break
                            vid.release()
                            cv2.destroyAllWindows()
                        case'4':
                            while true:
                                ret, img = vid.read()
                                gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                                start_point = (100, 100)
                                end_point = (400, 400)
                                cr = gray[start_point[1]:end_point[1], start_point[0]:end_point[0]]
                                rotation_matrix = cv2.getRotationMatrix2D((cr.shape[1]/2, cr.shape[0]/2), 45, 1)
                                rotated_image = cv2.warpAffine(gray), rotation_matrix, (cr.shape[1], cr.shape[0])
                                cv2.imshow('Rotate&Crop(gray)',rotated_image)
                                if cv2.waitKey(1) & 0xFF == ord('q'):
                                    break
                            vid.release()
                            cv2.destroyAllWindows()
                        case'5':
                            while True:
                                ret, img = vid.read()
                                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                                faces = face_cascade.detectMultiScale(gray, 1.3, 5)
                                for (x, y, w, h) in faces:
                                    cv2.rectangle(gray, (x, y), (x+w, y+h), (255, 0, 0), 2)
                                cv2.imshow('Face detect', gray)
                                if cv2.waitKey(1) & 0xFF == ord('q'):
                                    break
                            vid.release()
                            cv2.destroyAllWindows()
                        
            case'c':
                print( '1,PencilSketch',  '2,Croped Sketch',  '3,Rotated Sketch'  ,  '4, Cropped and rotated sketch', '5, Face Detect', sep='\n')
                choice2=input('Option: ')
                match choice2:
                    case'1':
                        while true:
                            ret, img = vid.read()
                            lar=cv2.Laplacian(img, cv2.CV_8U)
                            lar = cv2.GaussianBlur(lar, (5, 5), 0)
                            pencil_setch= cv2.bitwise_not(lar)
                            cv2.imshow('Pencil Setch',pencil_setch)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'2':
                        while true:
                            ret, img = vid.read()
                            gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                            start_point = (100, 100)
                            end_point = (400, 400)
                            cr = gray[start_point[1]:end_point[1], start_point[0]:end_point[0]]
                            lar=cv2.Laplacian(cr, cv2.CV_8U)
                            lar = cv2.GaussianBlur(lar, (5, 5), 0)
                            pencil_setch = cv2.bitwise_not(lar)
                            cv2.imshow('Pencil Setch',pencil_setch)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'3':
                        while true:
                            ret, img = vid.read()
                            rotation_matrix = cv2.getRotationMatrix2D((img.shape[1]/2, img.shape[0]/2), 45, 1)
                            rotated_image = cv2.warpAffine(gray), rotation_matrix, (img.shape[1], img.shape[0])
                            lar=cv2.Laplacian(rotated_image, cv2.CV_8U)
                            lar = cv2.GaussianBlur(lar, (5, 5), 0)
                            pencil_setch = cv2.bitwise_not(lar)
                            cv2.imshow('Pencil Setch',pencil_setch)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'4':
                        while true:
                            ret, img = vid.read()
                            gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                            start_point = (100, 100)
                            end_point = (400, 400)
                            cr = gray[start_point[1]:end_point[1], start_point[0]:end_point[0]]
                            rotation_matrix = cv2.getRotationMatrix2D((cr.shape[1]/2, cr.shape[0]/2), 45, 1)
                            rotated_image = cv2.warpAffine(gray), rotation_matrix, (cr.shape[1], cr.shape[0])
                            lar=cv2.Laplacian(rotated_image, cv2.CV_8U)
                            lar = cv2.GaussianBlur(lar, (5, 5), 0)
                            pencil_setch = cv2.bitwise_not(lar)
                            cv2.imshow('Pencil Setch',pencil_setch)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'5':
                        while True:
                            ret, img = vid.read()
                            lar=cv2.Laplacian(img, cv2.CV_8U)
                            lar = cv2.GaussianBlur(lar, (5, 5), 0)
                            pencil_setch = cv2.bitwise_not(lar)
                            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                            faces = face_cascade.detectMultiScale(gray, 1.3, 5)
                            for (x, y, w, h) in faces:
                                cv2.rectangle(pencil_setch, (x, y), (x+w, y+h), (255, 0, 0), 2)
                            cv2.imshow('Face detect', pencil_setch)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
            case'd':
                print( '1,Blur',   '2,Croped Blur', '3, Rotated Blur' , '4,Croped and Rotated Blur ', '5, Face Detect', sep='\n')
                choice2=input('Option: ')
                match choice2:
                    case'1':
                        while true:
                            ret, img = vid.read()
                            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                            lur = cv2.GaussianBlur(img, (15, 15), 0)
                            cv2.imshow('Blur',lur)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'2':
                        while true:
                            ret, img = vid.read()
                            gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                            start_point = (100, 100)
                            end_point = (400, 400)
                            cr = img[start_point[1]:end_point[1], start_point[0]:end_point[0]]
                            lur = cv2.GaussianBlur(cr, (15, 15), 0)
                            cv2.imshow('Blur',lur)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'3':
                        while true:
                            ret, img = vid.read()
                            rotation_matrix = cv2.getRotationMatrix2D((img.shape[1]/2, img.shape[0]/2), 45, 1)
                            rotated_image = cv2.warpAffine(img), rotation_matrix, (img.shape[1], img.shape[0])
                            lur = cv2.GaussianBlur(rotated_image, (15, 15), 0)
                            cv2.imshow('Blur',lur)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'4':
                        while true:
                            ret, img = vid.read()
                            gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                            start_point = (100, 100)
                            end_point = (400, 400)
                            cr = img[start_point[1]:end_point[1], start_point[0]:end_point[0]]
                            rotation_matrix = cv2.getRotationMatrix2D((cr.shape[1]/2, cr.shape[0]/2), 45, 1)
                            rotated_image = cv2.warpAffine(img), rotation_matrix, (cr.shape[1], cr.shape[0])
                            lur = cv2.GaussianBlur(rotated_image, (15, 15), 0)
                            cv2.imshow('Blur',lur)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'5':
                        while True:
                            ret, img = vid.read()
                            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                            lur = cv2.GaussianBlur(img, (15, 15), 0)
                            faces = face_cascade.detectMultiScale(gray, 1.3, 5)
                            for (x, y, w, h) in faces:
                                cv2.rectangle(lur, (x, y), (x+w, y+h), (255, 0, 0), 2)
                            cv2.imshow('Face detect', lur)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
            case'e':
                print('1,Laplacian' ,  '2,Croped Laplacian' , '3,Rotated Laplacian' , '4,Croped and Rotated Laplacian ','5, Face Detect', sep='\n')
                choice2=input('Option: ')
                match choice2:
                    case'1':
                        while true:
                            ret, img = vid.read()
                            lar=cv2.Laplacian(img, cv2.CV_8U)
                            lar = cv2.GaussianBlur(lar, (5, 5), 0)
                            cv2.imshow('Laplacian.orignal',lar)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'2':
                        while true:
                            ret, img = vid.read()
                            gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                            start_point = (100, 100)
                            end_point = (400, 400)
                            cr = gray[start_point[1]:end_point[1], start_point[0]:end_point[0]]
                            lar=cv2.Laplacian(cr, cv2.CV_8U)
                            lar = cv2.GaussianBlur(lar, (5, 5), 0)
                            cv2.imshow('Laplacian.orignal',lar)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'3':
                        while true:
                            ret, img = vid.read()
                            rotation_matrix = cv2.getRotationMatrix2D((img.shape[1]/2, img.shape[0]/2), 45, 1)
                            rotated_image = cv2.warpAffine(gray), rotation_matrix, (img.shape[1], img.shape[0])
                            lar=cv2.Laplacian(rotated_image, cv2.CV_8U)
                            lar = cv2.GaussianBlur(lar, (5, 5), 0)
                            cv2.imshow('Laplacian.orignal',lar)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'4':
                        while true:
                            ret, img = vid.read()
                            gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                            start_point = (100, 100)
                            end_point = (400, 400)
                            cr = gray[start_point[1]:end_point[1], start_point[0]:end_point[0]]
                            rotation_matrix = cv2.getRotationMatrix2D((cr.shape[1]/2, cr.shape[0]/2), 45, 1)
                            rotated_image = cv2.warpAffine(gray), rotation_matrix, (cr.shape[1], cr.shape[0])
                            lar=cv2.Laplacian(rotated_image, cv2.CV_8U)
                            lar = cv2.GaussianBlur(lar, (5, 5), 0)
                            cv2.imshow('Laplacian.orignal',lar)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
                    case'5':
                        while True:
                            ret, img = vid.read()
                            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                            lar=cv2.Laplacian(img, cv2.CV_8U)
                            lar = cv2.GaussianBlur(lar, (5, 5), 0)
                            faces = face_cascade.detectMultiScale(gray, 1.3, 5)
                            for (x, y, w, h) in faces:
                                cv2.rectangle(lar, (x, y), (x+w, y+h), (255, 0, 0), 2)
                            cv2.imshow('Face detect', lar)
                            if cv2.waitKey(1) & 0xFF == ord('q'):
                                break
                        vid.release()
                        cv2.destroyAllWindows()
            case'f':
                b=input('Enter lower blue value (0-255) ')
                B=input('Enter Upper Blue Value (0-255) ')
                g=input('Enter lower green value (0-255) ')
                G=input('Enter Upper Green Value (0-255) ')
                r=input('Enter lower red value (0-255) ')
                R=input('Enter Upper Red Vaulue (0-255) ')
                while True:
                    ret, image=vid.read()
                    lower= np.array([b,g,r], dtype = "uint8")
                    upper= np.array([B,G,R], dtype = "uint8")
                    mask = cv2.inRange(image, lower, upper)
                    detected_output = cv2.bitwise_and(image, image, mask = mask)
                    cv2.imshow("Color", detected_output)
                    if cv2.waitKey(1)& 0xFF == ord('q'):
                        break
                vid.release()
                cv2.destroyAllWindows()
            case'g':
                continue
            case _:
                print('Wrong input, Try again')
if __name__ == "__main__":
    main()
